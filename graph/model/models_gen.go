// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type OrganizationalUnit interface {
	IsOrganizationalUnit()
	GetAcronym() string
	GetCosts() *Cost
	GetProjects() []*Project
	GetProjectCount() *int
	GetTotalCloudSpend() *float64
	GetCarbonFootprint() *string
}

type Branch struct {
	Name            string         `json:"name"`
	Acronym         string         `json:"acronym"`
	Costs           *Cost          `json:"costs,omitempty"`
	Projects        []*Project     `json:"projects,omitempty"`
	ProjectCount    *int           `json:"projectCount,omitempty"`
	TotalCloudSpend *float64       `json:"totalCloudSpend,omitempty"`
	CarbonFootprint *string        `json:"carbonFootprint,omitempty"`
	Directorates    []*Directorate `json:"directorates,omitempty"`
	Department      *Department    `json:"department,omitempty"`
}

func (Branch) IsOrganizationalUnit()   {}
func (this Branch) GetAcronym() string { return this.Acronym }
func (this Branch) GetCosts() *Cost    { return this.Costs }
func (this Branch) GetProjects() []*Project {
	if this.Projects == nil {
		return nil
	}
	interfaceSlice := make([]*Project, 0, len(this.Projects))
	for _, concrete := range this.Projects {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this Branch) GetProjectCount() *int        { return this.ProjectCount }
func (this Branch) GetTotalCloudSpend() *float64 { return this.TotalCloudSpend }
func (this Branch) GetCarbonFootprint() *string  { return this.CarbonFootprint }

type CarbonFootPrint struct {
	LastSixMonths                    []*string `json:"lastSixMonths,omitempty"`
	CurrentMonthDeltaPercentage      *float64  `json:"currentMonthDeltaPercentage,omitempty"`
	PreviousMonth                    *string   `json:"previousMonth,omitempty"`
	PreviousFiscalYear               *string   `json:"previousFiscalYear,omitempty"`
	CurrentFiscalYearDeltaPercentage *float64  `json:"currentFiscalYearDeltaPercentage,omitempty"`
	PreviousCalendarYear             *string   `json:"previousCalendarYear,omitempty"`
	CurrentMonthToDate               *string   `json:"currentMonthToDate,omitempty"`
	CurrentFiscalToDate              *string   `json:"currentFiscalToDate,omitempty"`
	CurrentFiscalEstimated           *string   `json:"currentFiscalEstimated,omitempty"`
	CurrentCalendarYearToDate        *string   `json:"currentCalendarYearToDate,omitempty"`
	CurrentCalendarYearEstimated     *string   `json:"currentCalendarYearEstimated,omitempty"`
}

type Cost struct {
	LastSixMonths                    []*float64 `json:"lastSixMonths,omitempty"`
	CurrentMonthDeltaPercentage      *float64   `json:"currentMonthDeltaPercentage,omitempty"`
	PreviousMonth                    *float64   `json:"previousMonth,omitempty"`
	PreviousFiscalYear               *float64   `json:"previousFiscalYear,omitempty"`
	CurrentFiscalYearDeltaPercentage *float64   `json:"currentFiscalYearDeltaPercentage,omitempty"`
	PreviousCalendarYear             *float64   `json:"previousCalendarYear,omitempty"`
	CurrentMonthToDate               *float64   `json:"currentMonthToDate,omitempty"`
	CurrentFiscalToDate              *float64   `json:"currentFiscalToDate,omitempty"`
	CurrentFiscalEstimated           *float64   `json:"currentFiscalEstimated,omitempty"`
	CurrentCalendarYearToDate        *float64   `json:"currentCalendarYearToDate,omitempty"`
	CurrentCalendarYearEstimated     *float64   `json:"currentCalendarYearEstimated,omitempty"`
}

type Department struct {
	Name            string         `json:"name"`
	Acronym         string         `json:"acronym"`
	Costs           *Cost          `json:"costs,omitempty"`
	Projects        []*Project     `json:"projects,omitempty"`
	ProjectCount    *int           `json:"projectCount,omitempty"`
	TotalCloudSpend *float64       `json:"totalCloudSpend,omitempty"`
	CarbonFootprint *string        `json:"carbonFootprint,omitempty"`
	Branches        []*Branch      `json:"branches,omitempty"`
	Directorates    []*Directorate `json:"directorates,omitempty"`
}

func (Department) IsOrganizationalUnit()   {}
func (this Department) GetAcronym() string { return this.Acronym }
func (this Department) GetCosts() *Cost    { return this.Costs }
func (this Department) GetProjects() []*Project {
	if this.Projects == nil {
		return nil
	}
	interfaceSlice := make([]*Project, 0, len(this.Projects))
	for _, concrete := range this.Projects {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this Department) GetProjectCount() *int        { return this.ProjectCount }
func (this Department) GetTotalCloudSpend() *float64 { return this.TotalCloudSpend }
func (this Department) GetCarbonFootprint() *string  { return this.CarbonFootprint }

type Directorate struct {
	Name            string      `json:"name"`
	Acronym         string      `json:"acronym"`
	Costs           *Cost       `json:"costs,omitempty"`
	Projects        []*Project  `json:"projects,omitempty"`
	ProjectCount    *int        `json:"projectCount,omitempty"`
	TotalCloudSpend *float64    `json:"totalCloudSpend,omitempty"`
	CarbonFootprint *string     `json:"carbonFootprint,omitempty"`
	Branch          *Branch     `json:"branch,omitempty"`
	Department      *Department `json:"department,omitempty"`
}

func (Directorate) IsOrganizationalUnit()   {}
func (this Directorate) GetAcronym() string { return this.Acronym }
func (this Directorate) GetCosts() *Cost    { return this.Costs }
func (this Directorate) GetProjects() []*Project {
	if this.Projects == nil {
		return nil
	}
	interfaceSlice := make([]*Project, 0, len(this.Projects))
	for _, concrete := range this.Projects {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this Directorate) GetProjectCount() *int        { return this.ProjectCount }
func (this Directorate) GetTotalCloudSpend() *float64 { return this.TotalCloudSpend }
func (this Directorate) GetCarbonFootprint() *string  { return this.CarbonFootprint }

type Project struct {
	ID              string           `json:"id"`
	Costs           *Cost            `json:"costs,omitempty"`
	Classification  *Classification  `json:"classification,omitempty"`
	Owner           *Department      `json:"owner,omitempty"`
	CarbonFootprint *CarbonFootPrint `json:"carbonFootprint,omitempty"`
}

type Query struct {
}

type Classification string

const (
	ClassificationProtectedB   Classification = "PROTECTED_B"
	ClassificationProtectedA   Classification = "PROTECTED_A"
	ClassificationUnclassified Classification = "UNCLASSIFIED"
)

var AllClassification = []Classification{
	ClassificationProtectedB,
	ClassificationProtectedA,
	ClassificationUnclassified,
}

func (e Classification) IsValid() bool {
	switch e {
	case ClassificationProtectedB, ClassificationProtectedA, ClassificationUnclassified:
		return true
	}
	return false
}

func (e Classification) String() string {
	return string(e)
}

func (e *Classification) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Classification(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CLASSIFICATION", str)
	}
	return nil
}

func (e Classification) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
