package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"fmt"

	// "github.com/99designs/gqlgen/graphql"
	"github.com/HC-IPPM/cloud-cost-api/exec"
	"github.com/HC-IPPM/cloud-cost-api/graph/model"
)

// AllProjects is the resolver for the allProjects field.
func (r *queryResolver) AllProjects(ctx context.Context) ([]*model.Project, error) {
	if projects, err := exec.ExecuteQuery(ctx, r.BigQueryClient, []*string{}, true); err != nil {
		panic(err)
	} else {
		return projects, nil
	}
}

// Projects is the resolver for the projects field.
func (r *queryResolver) Projects(ctx context.Context, project_ids []*string) ([]*model.Project, error) {
	if projects, err := exec.ExecuteQuery(ctx, r.BigQueryClient, project_ids, false); err != nil {
		panic(err)
	} else {
		return projects, nil
	}
}

// Project is the resolver for the project field.
func (r *queryResolver) Project(ctx context.Context, id *string) (*model.Project, error) {
	project_ids := []*string{id}

	if projects, err := exec.ExecuteQuery(ctx, r.BigQueryClient, project_ids, false); err != nil {
		panic(err)
	} else {
		return projects[0], nil
	}
}

// Branch is the resolver for the branch field.
func (r *queryResolver) Branch(ctx context.Context, name *string) (*model.Branch, error) {
	panic(fmt.Errorf("not implemented: Branch - branch"))
}

// Directorate is the resolver for the directorate field.
func (r *queryResolver) Directorate(ctx context.Context, name *string) (*model.Directorate, error) {
	panic(fmt.Errorf("not implemented: Directorate - directorate"))
}

// Department is the resolver for the department field.
func (r *queryResolver) Department(ctx context.Context, name *string) (*model.Department, error) {
	panic(fmt.Errorf("not implemented: Department - department"))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
